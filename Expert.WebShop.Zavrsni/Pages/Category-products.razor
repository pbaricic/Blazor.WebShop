@page "/category/{id:int}/{categoryName}"
@using Expert.WebShop.Zavrsni.Models;
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject NotificationService NotificationService
@inject ShoppingCartInMemory shoppingCart

<PageTitle>@category.CategoryName | Expert</PageTitle>
<h3>@category.CategoryName</h3>


<div>
@foreach(var item in products){
<div class="card" style="width: 18rem;">
    <img class="card-img-top" src="@item.ImagePath" alt="Card image cap">
    <div class="card-body">
        <h5 class="card-title">@item.ProductName</h5>
        <p class="card-text">Opis: @item.ProductDescription</p>
        <p class="card-text">Cijena: @item.ProductPrice €</p>
        <RadzenButton Click="()=>Detalji(item.Id, item.ProductName)" Text="Detalji"></RadzenButton>
        <RadzenButton Click="(()=> {shoppingCart.AddToShoppingCart(item.Id); ShowNotification(item.ProductName); })" Text="Dodaj u košaricu"></RadzenButton>
    </div>
</div>
}
</div>
@code {
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public string categoryName { get; set; }

    private Category category = new Category();
    private List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        category = await GetCategory(id);
        products = await GetProducts(id);
        navManager.LocationChanged += LocationChanged;
    } 

    private async Task<Category> GetCategory(int categoryId)
    {
        var result = await httpClient.GetAsync($"https://expertshopapi.azurewebsites.net/api/Categories/{id}");
        if (result.IsSuccessStatusCode)
        {
            category = await result.Content.ReadFromJsonAsync<Category>();
        }
        return category;
    }

    private async Task<List<Product>> GetProducts(int categoryId)
    {
        var result = await httpClient.GetAsync($"https://expertshopapi.azurewebsites.net/api/Products/category-products/{id}");
        if (result.IsSuccessStatusCode)
        {
            products = await result.Content.ReadFromJsonAsync<List<Product>>();
        }
        return products;
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var result = await httpClient.GetAsync($"https://expertshopapi.azurewebsites.net/api/Categories/{id}");

        category = await result.Content.ReadFromJsonAsync<Category>();
        products = await GetProducts(id);

        StateHasChanged();
    }

    void ShowNotification(string productName)
    {
        var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Dodano u košaricu", Detail = $"Uspješno ste dodali proizvod {productName} u košaricu!", Duration = 5000 };
        NotificationService.Notify(message);
    }

    private async Task Detalji(int id, string productName)
    {
        navManager.NavigateTo($"/detalji/{id}/{productName}");
    }
}
