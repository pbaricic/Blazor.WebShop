@page "/detalji/{id:int}/{productName}"
@inject HttpClient httpClient
@inject NavigationManager navManager
@using Expert.WebShop.Zavrsni.Models

<PageTitle>Detalji proizvoda | Expert</PageTitle>
@if (IsLoadError)
{
    <h3 class="alert-danger">@Constants.LoadError</h3>
}else{
<h3>Detalji proizvoda @prod.ProductName</h3>
}

<div class="card mb-3" style="max-width: 540px;">
    <div class="row g-0">
        <div class="col-md-4">
            <img src="@prod.ImagePath" class="img-fluid rounded-start" alt="...">
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title"><b>@prod.ProductName</b></h5>
                <p class="card-text">Opis: <b>@prod.ProductDescription</b></p>
                <p class="card-text"><small class="text-body-secondary">Cijena: @prod.ProductPrice €</small></p>
                @if (@prod.Discount > 0)
                {
                    <p class="card-text"><small class="text-body-secondary">Popust: @prod.Discount %</small></p>  
                }
               
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public string productName { get; set; }
    bool IsLoadError = false;

    Product prod = new Product();

    protected override async Task OnInitializedAsync()
    {
        var result = await httpClient.GetAsync($"{Constants.baseUrl}/Products/{id}");
        if (result.IsSuccessStatusCode)
        {
            prod = await result.Content.ReadFromJsonAsync<Product>();
        }
        else
        {
            IsLoadError = true;
            StateHasChanged();
        }
    }
}
